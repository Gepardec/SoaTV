<?xml version="1.0" encoding="UTF-8"?>
<!-- Configures the Camel Context -->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:amq="http://activemq.apache.org/schema/core"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd
       http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd">

	<!-- This creates an embedded ActiveMQ Broker -->
	<!--
	<broker xmlns="http://activemq.apache.org/schema/core" useJmx="true"
		persistent="false" brokerName="localhost">
		<transportConnectors>
			<transportConnector uri="tcp://localhost:61616" />
		</transportConnectors>
	</broker>
	-->
	<!-- Lets connect the Camel ActiveMQ component to the embedded broker. See 
		http://camel.apache.org/activemq.html for more information. -->
	<!--
	<bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
		<property name="brokerURL" value="failover:tcp://localhost:61616" />
	</bean>
	-->
	<bean id="jndiTemplate" class="org.springframework.jndi.JndiTemplate">
		<property name="environment">
			<props>
				<prop key="java.naming.factory.initial">org.jboss.naming.remote.client.InitialContextFactory</prop>
				<prop key="java.naming.provider.url">http-remoting://127.0.0.1:8080</prop>
				<prop key="java.naming.security.principal">user</prop>
				<prop key="java.naming.security.credentials">user@123</prop>
			</props>
		</property>
	</bean>

	<bean id="jmsQueueConnectionFactory" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiTemplate">
			<ref bean="jndiTemplate" />
		</property>
		<property name="jndiName">
			<value>/jms/RemoteConnectionFactory</value>
		</property>
	</bean>

	<bean name="jms" class="org.apache.camel.component.jms.JmsComponent">
		<property name="connectionFactory" ref="jmsQueueConnectionFactory" />
	</bean>
	
	<!-- Here is a sample which processes the input files (leaving them in place 
		- see the 'noop' flag), and sends them on a JMS queue. This queue is watched 
		by another route which then performs content based routing on the messages 
		using XPath. -->
	<camelContext xmlns="http://camel.apache.org/schema/spring">
		<package>com.objectbay.soatv.camel</package>
		<!-- route>
			<from uri="file:src/data?noop=true" />
			<to uri="log:at.objectbay.test.INPUT_MSG?level=DEBUG" />
			<convertBodyTo type="java.lang.String" />
			<to uri="activemq:personnel.records" />
		</route-->
		<!-- <route> -->
		<!-- <from uri="activemq:personnel.records"/> -->
		<!-- <choice> -->
		<!-- <when> -->
		<!-- <xpath>/person/city = 'London'</xpath> -->
		<!-- <to uri="file:target/messages/uk"/> -->
		<!-- </when> -->
		<!-- <otherwise> -->
		<!-- <to uri="file:target/messages/others"/> -->
		<!-- </otherwise> -->
		<!-- </choice> -->
		<!-- </route> -->
	</camelContext>

</beans>
